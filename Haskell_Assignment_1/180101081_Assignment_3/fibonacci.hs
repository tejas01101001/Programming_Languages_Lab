{-
    Author : Tejas Khairnar
    Roll number : 180101081

    1. The code was written ,complied and executed in Ubuntu 20.04 using
       Glasgow Haskell Compiler, Version 8.6.5, stage 2 booted by GHC version 8.6.5
    2. Make sure you have ghc installed on your system
    3. Change the working directory to the source code
    4. To compile the code and create the object file type the following command in terminal
      'ghc -o obj fibonacci.hs'
    5. To run the code type the following command in terminal
      './obj'
    6. Enter the index of the number for which you want to find the fibonacci number
    7. I have also given 10 testcases at the end of the code for which you can test the code
    8. The time complexity of this particular code is O(n) due to the storage of previos
    
-}

-- O(n) function to find the fibonacci numbers
fibo :: (Eq t1, Num t1, Num t2) => t1 -> t2 -> t2 -> t2
fibo value last secondLast
  | value == 0 = secondLast
  | otherwise = fibo (value-1) (secondLast+last) last 

main :: IO ()
main = do
  -- Read the index of the number for which we want to find the fibonacci number
  putStrLn "Enter the index of the fibonacci number"
  num <- readLn

  putStr "Fibonacci number at the given index is "
  if num == 1 then print(1)       -- Base Case
  else print (fibo num 1 0)       -- Recursive Step


------------ TESTCASES ----------------
{-
         Input             Output
    1.   1                  1
    2.   2                  1
    3.   3                  2
    4.   4                  3
    5.   10                 55
    6.   200                280571172992510140037611932413038677189525
    7.   13                 233
    8.   100                354224848179261915075
    9.   56                 225851433717


-}